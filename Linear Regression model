'''implement a simple linear regression model using a dataset 
with continuous target variables. split the data into training 
and testing sets, train the model on the training data, evaluate 
its performance using metrics like mean squared error or R-squared, 
and make predictions on the test set. visualize the regression line and 
actual vs predicted values to assess the models accuracy'''


import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

np.random.seed(0)
X = 2 * np.random.rand(100, 1)
y = 4 + 3 * X + np.random.randn(100, 1)

plt.scatter(X, y)
plt.xlabel("X")
plt.ylabel("y")
plt.title("Generated Data")
plt.show()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the training set and test set
y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

# Calculate performance metrics
mse_train = mean_squared_error(y_train, y_train_pred)
r2_train = r2_score(y_train, y_train_pred)
mse_test = mean_squared_error(y_test, y_test_pred)
r2_test = r2_score(y_test, y_test_pred)

print(f"Training MSE: {mse_train}")
print(f"Training R²: {r2_train}")
print(f"Test MSE: {mse_test}")
print(f"Test R²: {r2_test}")

# Visualize the regression line on the training data
plt.scatter(X_train, y_train, color='blue', label='Training data')
plt.plot(X_train, y_train_pred, color='red', linewidth=2, label='Regression line')
plt.xlabel("X")
plt.ylabel("y")
plt.title("Training Data with Regression Line")
plt.legend()
plt.show()

# Visualize actual vs predicted values for the test set
plt.scatter(X_test, y_test, color='blue', label='Actual values')
plt.scatter(X_test, y_test_pred, color='red', label='Predicted values')
plt.xlabel("X")
plt.ylabel("y")
plt.title("Actual vs Predicted Values on Test Set")
plt.legend()
plt.show()
